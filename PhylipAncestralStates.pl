#! /usr/bin/env perl
=head1 NAME

PlylipAncestralStates<.pl>

=head1 USAGE

 PlylipAncestralStates.pl [options -v,-d,-h] <ARGS>
 
 Example usage: PhylipAncestralStates.pl -f ./outfile -t ./intree -tbd 1 -sff 1 -o Parsimony
 Where outfile and infile are input/ouput files for Phylip DOLLOP
 to send us your comments. We are very grateful for anything you might have to say as it is your feedback which helps us to improve, adapt, and fix bugs. If you think you may have found a problem, but are not sure, then please don't be shy. We'd much rather receive reports than not. Equally, if you would like to see additional services or links please let us know and we will endeavour to include th
=head1 SYNOPSIS

A script to parse the parsimony ancestral states file produced by phylip dollop or mix. These files are supposed to be human readable, so this script
will put them into some different form. At it's core, a data structure is created with the appropriate ancestral state genome. A variety of outputs can 
then be generated from this (such as a tree with branch lengths proportional to deletions and/or creations)

=head1 AUTHOR

B<Adam Sardar> - I<adam.sardar@bristol.ac.uk>

=head1 COPYRIGHT

Copyright 2011 Gough Group, University of Bristol.

=head1 EDIT HISTORY
=cut

# Strict Pragmas
#----------------------------------------------------------------------------------------------------------------
use strict;
use warnings;
#use diagnostics;

# Add Local Library to LibPath
#----------------------------------------------------------------------------------------------------------------
use lib "$ENV{HOME}/bin/perl-libs-custom/";

# CPAN Includes
#----------------------------------------------------------------------------------------------------------------
=head1 DEPENDANCY
B<Getopt::Long> Used to parse command line options.
B<Pod::Usage> Used for usage and help output.
B<Data::Dumper> Used for debug output.
=cut
use Getopt::Long;                     #Deal with command line options
use Pod::Usage;                       #Print a usage man page from the POD comments after __END__
use Data::Dumper;                     #Allow easy print dumps of datastructures for debugging
#use XML::Simple qw(:strict);          #Load a config file from the local directory
use DBI;
use Supfam::Utils;
use Supfam::Phylip_Ancestral_States_Parser;

use Time::HiRes;

#For using BuildTreeCacheHash
use Bio::TreeIO;
use Bio::Tree::TreeFunctionsI;

# Command Line Options
#----------------------------------------------------------------------------------------------------------------

my $verbose; #Flag for verbose output from command line opts
my $debug;   #As above for debug
my $help;    #Same again but this time should we output the POD man page defined after __END__
my $InputFile='./outfile';
my $CarachtersFile='./infile';
my $TreeFile='./intree';
my $TreeByDeletions=0; #Flag for a tree constructed using the number of crachter deletions as branch lengths
my $TreeByCreations=0; #Flag for a tree constructed using the number of crachter creations as branch lengths
my $TreeByDeletionsAndCreations=0; #Flag for a tree constructed using the number of crachter changes as branch lengths
my $OutputFileStub;
my $SuperfamilyFormatFlag=0;

#Set command line flags and parameters.
GetOptions("verbose|v!"  => \$verbose,
           "debug|d!"  => \$debug,
           "help|h!" => \$help,
          "file|f=s" => \$InputFile, #outfile as generated by Phylip
          "out|o=s" => \$OutputFileStub,
          "tree|t:s" => \$TreeFile,
           "treebydeletions|tbc:i" => \$TreeByCreations,
           "treebycreations|tbd:i" => \$TreeByDeletions,
           "treebydelsandcreats|tbcd:i" => \$TreeByDeletionsAndCreations,
           "SFFormat|sff:i" => \$SuperfamilyFormatFlag,
          "carachters|s:s" => \$CarachtersFile, #A simple tab seperated list of carachters used in the parsimony
        ) or die "Fatal Error: Problem parsing command-line ".$!;


# Main Script Contentneed to call Dan tonight anyway, meant to be going out for a 
#----------------------------------------------------------------------------------------------------------------

(my $AncestralChangesHash) = ParsePhylipAnces($InputFile);
#This is a hash detailign the changes that have occured along each and every branch in the tree according to the parsimony pragma used (dollop or mix in phylip)
# Data structure style $TreeBranchHash->{$BranchChild}[BranchAncestor,[list of trait changes]] 


my ($root, $TreeCacheHash,$tree) = BuildTreeCacheHash($TreeFile);

#Map nodes in the Phylip output to bioperlnode ids used in tree cache hash	
my ($Bioperl2PhylipMap,$Phylip2BioperlMap) = MapPhylipTree2BioPerl($AncestralChangesHash,$TreeCacheHash,$root);

foreach my $PhylipNode (keys(%$AncestralChangesHash)){
	
	#print $PhylipNode."\n";
	
	my $CarachterChangeArrayPointer = $AncestralChangesHash->{$PhylipNode}[1];
	my $BPNode = $Phylip2BioperlMap->{$PhylipNode};
	
	$TreeCacheHash->{$BPNode}{'parsimony_branch_carachter_state_changes'} = $CarachterChangeArrayPointer;
	$TreeCacheHash->{$BPNode}{'parsimony_branch_carachter_creations'} = grep{m/^0$/}@{$CarachterChangeArrayPointer}; #Phylip lists 0 as a deletion and 1 as a creation, BUT from the perspective of going UP the tree from a (known) leaf state
	$TreeCacheHash->{$BPNode}{'parsimony_branch_carachter_deletions'} = grep{m/^1$/}@{$CarachterChangeArrayPointer};
}

#Generate a tree with branches proportional to creation or deletion events

my ($Creations,$Deletions,$NewickTree);
my @TreeNodes = @{$TreeCacheHash->{$root}{'all_Descendents'}};
my $NoCarachterStates = 10*scalar(@{$TreeCacheHash->{$root}{'parsimony_branch_carachter_state_changes'}}); # an arbitary normalising factor

##Output to file depending on paramenters passed in

if($TreeByDeletions){

	foreach my $NodeID (@TreeNodes){
		
		$Deletions = 1+$TreeCacheHash->{$NodeID}{'parsimony_branch_carachter_deletions'}; #1 is a psuedo count
		$NodeID->branch_length($Deletions/$NoCarachterStates);
	}

	#WriteOutToFile;
	
	$NewickTree = $tree->as_text('newick');
	$NewickTree =~ s/([\(\,]{1})Taxon([\w]{2,3})/$1$2/g if($SuperfamilyFormatFlag); #God damn hate Phylip
	
	open FH, "> $OutputFileStub-Deletions.nwk";
	print FH $NewickTree;
	close FH;
}

if($TreeByCreations){

	foreach my $NodeID (@TreeNodes){
		
		$Creations = 0.01+$TreeCacheHash->{$NodeID}{'parsimony_branch_carachter_creations'};
		$NodeID->branch_length($Creations/$NoCarachterStates);
	}

	#WriteOutToFile;
	$NewickTree = $tree->as_text('newick');
	$NewickTree =~ s/([\(\,]{1})Taxon([\w]{2,3})/$1$2/g if($SuperfamilyFormatFlag); #God damn hate Phylip
	
	open FH, "> $OutputFileStub-Creations.nwk";
	print FH $NewickTree;
	close FH;

}

if($TreeByDeletionsAndCreations){
	
	foreach my $NodeID (@TreeNodes){
		
		$Creations = 0.01+$TreeCacheHash->{$NodeID}{'parsimony_branch_carachter_creations'};
		$Deletions = 0.01+$TreeCacheHash->{$NodeID}{'parsimony_branch_carachter_deletions'};
		$NodeID->branch_length(($Creations+$Deletions)/$NoCarachterStates);
	}

	#WriteOutToFile;
	$NewickTree = $tree->as_text('newick');
	$NewickTree =~ s/([\(\,]{1})Taxon([\w]{2,3})/$1$2/g if($SuperfamilyFormatFlag); #God damn hate Phylip
	
	open FH, "> $OutputFileStub-deletionsandcreations.nwk";
	print FH $NewickTree;
	close FH;
	
}


#Output Ancestral states carachter hash as a perl dump (uses data dumper module)

#Ongoing

#Parse original carachter matrix file (phylip format) and assign to leaves

#depth first reconstruction of ancestral states.




__END__

