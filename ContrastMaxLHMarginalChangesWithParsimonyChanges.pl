#! /usr/bin/env perl

=head1 NAME

ContrastMaxLHMarginalChangesWithParsimonyChanges<.pl>

=head1 USAGE


ContrastMaxLHMarginalChangesWithParsimonyChanges.pl [options -v,-d,-h] <ARGS>

example:
ContrastMaxLHMarginalChangesWithParsimonyChanges.pl -f ./RAxML_marginalAncestralStates.BacteriaAncestral -st ./BacteriaTraits -o Contrasted -t ./BacteraSupraDomainTree14Nov2011.tree -o ./outfile

=head1 SYNOPSIS

This script even has a horrible name. But it's a quick and dirty test of thresholded max likelihood values for a traits creation vs a simple dollo parisomny
approach (performed in script).

=head1 AUTHOR

B<Adam Sardar> - I<adam.sardar@bristol.ac.uk>

=head1 COPYRIGHT

Copyright 2011 Gough Group, University of Bristol.

=cut

# Strict Pragmas
#----------------------------------------------------------------------------------------------------------------
use strict;
use warnings;
#use diagnostics;

# Add Local Library to LibPath
#----------------------------------------------------------------------------------------------------------------
use lib "$ENV{HOME}/bin/perl-libs-custom/";

# CPAN Includes
#----------------------------------------------------------------------------------------------------------------
=head1 DEPENDANCY
B<Getopt::Long> Used to parse command line options.
B<Pod::Usage> Used for usage and help output.
B<Data::Dumper> Used for debug output.
=cut
use Getopt::Long;                     #Deal with command line options
use Pod::Usage;                       #Print a usage man page from the POD comments after __END__
use Data::Dumper;                     #Allow easy print dumps of datastructures for debugging
#use XML::Simple qw(:strict);          #Load a config file from the local directory
use DBI;
use Supfam::Utils;

use Supfam::TreeFuncsNonBP;
use Supfam::RAxML_Ancestral_States_Parser;
use Supfam::DolloParsmony;

# Command Line Options
#----------------------------------------------------------------------------------------------------------------

my $verbose; #Flag for verbose output from command line opts
my $debug;   #As above for debug
my $help;    #Same again but this time should we output the POD man page defined after __END__

my $InputFile;
my $TreeFile;
my $OutputFileStub;
my $MarginalStatesFile;
my $LeafSpeciesStatesFile;
my $PhylipAncestralStates;


#Set command line flags and parameters.
GetOptions("verbose|v!"  => \$verbose,
           "debug|d!"  => \$debug,
           "help|h!" => \$help,
          "file|f=s" => \$MarginalStatesFile, #probabilities output file as generated by RAxML
          "speciestraits|st=s" => \$LeafSpeciesStatesFile, #trait file used to build RAxMl tree
          "out|o=s" => \$OutputFileStub,
          "tree|t=s" => \$TreeFile,
     ) or die "Fatal Error: Problem parsing command-line ".$!;
     
     
     
#Print out some help if it was asked for or if no arguments were given.
pod2usage(-exitstatus => 0, -verbose => 2) if $help;

# Sub definitions
#----------------------------------------------------------------------------------------------------------------


# Main Script Content
#----------------------------------------------------------------------------------------------------------------

die "Need to specify a probabilities file! \n" unless($MarginalStatesFile);

open FH, "<$TreeFile" or die $?;

my $NewickStringOfTree = <FH>;

close FH;

my ($root,$TreeCacheHash) = BuildTreeCacheHash($NewickStringOfTree);
print "Built TreeCacheHash\n";

RAxMLAncestralMarginalStates_FileParser($MarginalStatesFile,$TreeCacheHash,$LeafSpeciesStatesFile);
print "Parsed ML Ancestral States\n";

DolloParsimonyAncestralState($TreeCacheHash,$root,$LeafSpeciesStatesFile,10); #Using 10 threads
print "Parsed DOLLOP Ancestral States\n";

my $NumberOfTraits = scalar(keys(%{$TreeCacheHash->{$root}{'DolloP_Trait_String_Poistions_Lookup'}}));

RAxML_Ancestral_Trait_Changes_in_Clade($TreeCacheHash,$root,$root);

print $TreeCacheHash->{$root}{'RAxML_Total_Number_Created'}." = Total ML Created below root\n";
print $TreeCacheHash->{$root}{'RAxML_Total_Number_Deleted'}." = Total ML Deleted below root\n";
print $TreeCacheHash->{$root}{'RAxML_Number_Created'}."= Created ML above root\n";
print $TreeCacheHash->{$root}{'RAxML_Number_Deleted'}." = Deleted ML above root\n";
print "Finished with ML!\n";

DOLLOP_Ancestral_Trait_Changes_in_Clade($TreeCacheHash,$root,$root);

print $TreeCacheHash->{$root}{'DOLLOP_Total_Number_Created'}." = Total DOLLOP Created below root\n";
print $TreeCacheHash->{$root}{'DOLLOP_Total_Number_Deleted'}." = Total DOLLOP Deleted below root\n";
print $TreeCacheHash->{$root}{'DOLLOP_Number_Created'}."= Created DOLLOP above root\n";
print $TreeCacheHash->{$root}{'DOLLOP_Number_Deleted'}." = Deleted DOLLOP above root\n";
print "Finished with DOLLOP!\n";

print "Total number of traits: $NumberOfTraits (This should be the same as the dollo case)\n"

__END__