#! /usr/bin/env perl

=head1 NAME

RAxMLAncestralStates<.pl>

=head1 USAGE

 RAxMLAncestralStates.pl [options -v,-d,-h] <ARGS>
 
 Example usage: RAxMLAncestralStates.pl

=head1 SYNOPSIS

A script to parse the parsimony ancestral states file produced by RAxML. This will then return a tree in newick format with
branch lengths proportional to the change in probability of the state on that branch

=head1 AUTHOR

B<Adam Sardar> - I<adam.sardar@bristol.ac.uk>

=head1 COPYRIGHT

Copyright 2011 Gough Group, University of Bristol.

=head1 EDIT HISTORY
=cut

# Strict Pragmas
#----------------------------------------------------------------------------------------------------------------
use strict;
use warnings;
#use diagnostics;

# Add Local Library to LibPath
#----------------------------------------------------------------------------------------------------------------
use lib "$ENV{HOME}/bin/perl-libs-custom/";

# CPAN Includes
#----------------------------------------------------------------------------------------------------------------
=head1 DEPENDANCY
B<Getopt::Long> Used to parse command line options.
B<Pod::Usage> Used for usage and help output.
B<Data::Dumper> Used for debug output.
=cut
use Getopt::Long;                     #Deal with command line options
use Pod::Usage;                       #Print a usage man page from the POD comments after __END__
use Data::Dumper;                     #Allow easy print dumps of datastructures for debugging
#use XML::Simple qw(:strict);          #Load a config file from the local directory
use DBI;
use Supfam::Utils;

use Time::HiRes;

#For using BuildTreeCacheHash
use Bio::TreeIO;
use Bio::Tree::TreeFunctionsI;

use Supfam::TreeFuncs;
use Supfam::RAxML_Ancestral_States_Parser;

# Command Line Options
#----------------------------------------------------------------------------------------------------------------

my $verbose; #Flag for verbose output from command line opts
my $debug;   #As above for debug
my $help;    #Same again but this time should we output the POD man page defined after __END__

my $InputFile;
my $TreeFile;
my $OutputFileStub;
my $MarginalProbabilitiesFile;
my $LeafSpeciesStatesFile;

use Bio::Tree::TreeI;

#Set command line flags and parameters.
GetOptions("verbose|v!"  => \$verbose,
           "debug|d!"  => \$debug,
           "help|h!" => \$help,
          "file|f=s" => \$MarginalProbabilitiesFile, #probabilities output file as generated by RAxML
          "speciestraits|st=s" => \$LeafSpeciesStatesFile, #trait file used to build RAxMl tree
          "out|o=s" => \$OutputFileStub,
          "tree|t:s" => \$TreeFile,
     ) or die "Fatal Error: Problem parsing command-line ".$!;


# Sub definitions
#----------------------------------------------------------------------------------------------------------------


# Main Script Contentneed to call Dan tonight anyway, meant to be going out for a 
#----------------------------------------------------------------------------------------------------------------


die "Need to specify a probabilities file! \n" unless($MarginalProbabilitiesFile);

my ($root,$TreeCacheHash,$tree) = BuildTreeCacheHash($TreeFile); # A massive limitation of this script is the use of BioPerl TreeIO which is SLOOOOW. This is a lookup hash to speed things up.

print "Built TreecahceHash\n";

RAxMLAncestralMarginalProbabilities_FileParser($MarginalProbabilitiesFile,$LeafSpeciesStatesFile,$TreeCacheHash);
# Adds the following entry to treechache $TreeChacheHash->{BioPerlNodeID}{'AncestralProbabilities'}=[[p(state0 for trait 1),p(state1 for trait 1),..],[p(state0 for trait 2),p(state1 for trait 2),..],...,[p(state0 for trait n),p(state1 for trait n),..]]

print "Parsed Marginal Probabilities file successfully\n";

my $NewickTree = DeletionsTreeByMLProbabilities($TreeCacheHash,$root,$tree);

open FH, "> $OutputFileStub-Deletions.nwk";
print FH $NewickTree;
close FH;

__END__

