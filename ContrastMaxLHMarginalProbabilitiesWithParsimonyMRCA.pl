#! /usr/bin/env perl

=head1 NAME

ContrastMaxLHMarginalStatesWithParsimonyMRCA<.pl>

=head1 USAGE


ContrastMaxLHMarginalStatesWithParsimonyMRCA.pl [options -v,-d,-h] <ARGS>

example:

ContrastMaxLHMarginalProbabilitiesWithParsimonyMRCA.pl -f ./RAxML_marginalAncestralProbabilities.BacteriaAncestral -st ./BacteriaTraits -o Contrasted -t ./BacteraSupraDomainTree14Nov2011.tree -pt ./outfile


=head1 SYNOPSIS

This script is designed to read in the full marginal states ancestral reconstruction outputted by RAxML and reconstruct the MRCA of a domain architecture, given an input tree.
Ouput is a list of likelihoods, given by marginal MaxLH, of that trait being in that ancestor (per domain architecture).

=head1 AUTHOR

B<Adam Sardar> - I<adam.sardar@bristol.ac.uk>

=head1 COPYRIGHT

Copyright 2011 Gough Group, University of Bristol.

=cut

# Strict Pragmas
#----------------------------------------------------------------------------------------------------------------
use strict;
use warnings;
#use diagnostics;

# Add Local Library to LibPath
#----------------------------------------------------------------------------------------------------------------
use lib "$ENV{HOME}/bin/perl-libs-custom/";

# CPAN Includes
#----------------------------------------------------------------------------------------------------------------
=head1 DEPENDANCY
B<Getopt::Long> Used to parse command line options.
B<Pod::Usage> Used for usage and help output.
B<Data::Dumper> Used for debug output.
=cut
use Getopt::Long;                     #Deal with command line options
use Pod::Usage;                       #Print a usage man page from the POD comments after __END__
use Data::Dumper;                     #Allow easy print dumps of datastructures for debugging
#use XML::Simple qw(:strict);          #Load a config file from the local directory
use DBI;
use Supfam::Utils;

use Supfam::TreeFuncsNonBP;
use Supfam::RAxML_Ancestral_States_Parser;
use Supfam::DolloParsmony;

use Time::HiRes;

# Command Line Options
#----------------------------------------------------------------------------------------------------------------

my $verbose; #Flag for verbose output from command line opts
my $debug;   #As above for debug
my $help;    #Same again but this time should we output the POD man page defined after __END__

my $InputFile;
my $TreeFile;
my $OutputFileStub;
my $MarginalProbsFile;
my $LeafSpeciesStatesFile;
my $PhylipAncestralStates;


#Set command line flags and parameters.
GetOptions("verbose|v!"  => \$verbose,
           "debug|d!"  => \$debug,
           "help|h!" => \$help,
          "file|f=s" => \$MarginalProbsFile, #probabilities output file as generated by RAxML
          "speciestraits|st=s" => \$LeafSpeciesStatesFile, #trait file used to build RAxMl tree
          "out|o=s" => \$OutputFileStub,
          "tree|t=s" => \$TreeFile,
     ) or die "Fatal Error: Problem parsing command-line ".$!;
     
     
     
#Print out some help if it was asked for or if no arguments were given.
pod2usage(-exitstatus => 0, -verbose => 2) if $help;


# Main Script Content
#----------------------------------------------------------------------------------------------------------------

die "Need to specify a probabilities file! \n" unless($MarginalProbsFile);

open FH, "<$TreeFile" or die $?;

my $NewickStringOfTree = <FH>;

close FH;

my ($root,$TreeCacheHash) = BuildTreeCacheHash($NewickStringOfTree);
print "Built TreeCacheHash\n";

my $tic = Time::HiRes::time;

RAxMLAncestralMarginalProbabilities_FileParser($MarginalProbsFile,$LeafSpeciesStatesFile,$TreeCacheHash);

my $toc = Time::HiRes::time;

print "Time taken to process marginal probs =";
print ($toc-$tic);
print " seconds\n";

my @MaxLHEstimates;

my $RAxML_Positions_Lookup = $TreeCacheHash->{$root}{'RAxML_Trait_String_Poistions_Lookup'};


foreach my $Trait (keys(%{$TreeCacheHash->{$root}{'RAxML_Trait_String_Poistions_Lookup'}})){
			
		my $LeavesWithTrait = RAxMLLeavesWithTrait($TreeCacheHash,$root,$Trait); #ArrayRef of leaves with given trait.
	
		my $MRCA = FindMRCA($TreeCacheHash,$root,$LeavesWithTrait); #Find the dollo parsimony MRCA
		
		my ($start,$end) = @{$RAxML_Positions_Lookup->{$Trait}};
		
		my $RAxMLMarginalProbabilitiesConcatenatedStringState1 = $TreeCacheHash->{$MRCA}{'RAxML_AncestralProbabilities'}[1];
		die "end outside of stirng" if (length($RAxMLMarginalProbabilitiesConcatenatedStringState1) < $end);
		
		my $MaxLHOfParsimonyMRCA = substr($RAxMLMarginalProbabilitiesConcatenatedStringState1,$start,($end-$start));
		
		push(@MaxLHEstimates,$MaxLHOfParsimonyMRCA);
}

open OUTPUT, ">$OutputFileStub" or die $?.$!;

foreach my $Result (@MaxLHEstimates){
	
	print OUTPUT $Result."\n"
	
}

close OUTPUT;




__END__